(int, int, int, int) ecrecover (int hash, int v, int r, int s) asm "ECRECOVER NULLSWAPIFNOT2 NULLSWAPIFNOT";

;; Higher part of N
const int HIGH_S = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0;

int check_secp256k1_signature(int test_hash, slice data, int public_key, int parity) inline {

	int v = data~load_uint(1);
	int r = data~load_uint(256);
	int s = data~load_uint(256);

	;; Accpeting signatures only from the "lower part" of the curve.
	if(s >= HIGH_S) {
		return false;
	}

	{-
		Returns key type identifier x, y coordinates and execution status
		Function returns key in 65 byte uncomrpessed form, so keyId is always 4. Meaning uncompressed key
	-}

	var (keyId, x, y, status) = ecrecover(test_hash, v, r, s);

	if(status) {

		{-
		 On status success we got public key recovered.
		 In order to verify that the signature was created
		 by corresponding private key, it is required to check that recovered
		 public key equals stored public key.

		 Contract key is stored in compressed form (y parity bit and full x coordinate).
		 So, in order to determine that recovery result matches the stored key
		 we have to:
		 1) Check that x coordinate matches
		 2) Check that y parity matches

		 Compressed public key is a standard form for secp256k1 curve.
		 It is possible to reduce key to single coordinate x and y pairty bit because of
		 the properties of the secp256k1 curve.

		 https://www.secg.org/sec2-v2.pdf section 2.4.1

		 secp256k1 curve is defined over finite field Fp where
		 p is a prime number.
		 p = 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFE_FFFFFC2F;

		 Curve equetion is y**2 = x**3 + 7 (all operations mod p)

		 ecrecover provides public key point (x, y) as a result.
		 From equation it is clear that for single x there are
		 two possible y (y and -y).

		 -y mod p = p - y, and since p is a prime->odd number,
		 both y solutions guaranteed to have opposite parity.

		 odd +- even = odd
		 odd +- odd  = even
		-}

		return (parity == (y & 1)) & (x == public_key);
	}
	return status;
}
